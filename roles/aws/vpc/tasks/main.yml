# roles/aws/vpc/tasks/main.yml
# ---
# creates a VPC, configures a list of defined subnets, and configures a list of defined security groups

# VPC
# use the Ansible module to create our VPC, saving the output into `create_vpc`
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}" 
  register: create_vpc

# parse the output of creating the VPC to extract the VPC ID -- we need to specify this in the subsequent tasks
- name: "set fact: VPC ID"
  set_fact:
    vpc_id: "{{ create_vpc.vpc.id }}"

# Subnet
# iterate over our dictionary of subnets with `with_dict`, and create each one with the Ansible module
- name: create VPC subnets
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    tags:
      Name: "{{ item.key }}"
  with_dict: "{{ vpc_subnets }}"
  register: create_vpc_subnets

# store all subnet ids created by create_vpc_subnets register into a variable called vpc_subnet_ids
- name: "Set fact: VPC subnet IDs"
  set_fact:
    vpc_subnet_ids: "{{ vpc_subnet_ids | default({}) | combine({ item.subnet.tags.Name: item.subnet.id }) }}"
  loop: "{{ create_vpc_subnets.results }}"  

# Security Group
# iterate over our list of security groups and create each one with the Ansible module
- name: create VPC security groups
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ vpc_id }}"
    rules: "{{ item.rules }}"
  loop: "{{ vpc_security_groups }}"
  register: sg

# store all subnet ids created by create_vpc_subnets register into a variable called vpc_subnet_ids
- name: "Set fact: VPC subnet IDs"
  set_fact:
    vpc_sg_ids: "{{ vpc_sg_ids | default({}) | combine({ item.group_name: item.group_id }) }}"
  loop: "{{ sg.results }}"  

